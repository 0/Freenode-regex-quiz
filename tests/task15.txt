; start before end
; task 15
; 2012-01-26

== 0
start end
You're not matching the 03start end yet.

== 0
start
Not matching 3start. The text 3end is optional.

== 0
aaa sssstartttt bbb end
Not matching 3aaa sssstartttt bbb end yet

validate: "isin", "sssstartttt"
You're not supposed to have 03sssstartttt in your expression. Try again.

!= 0
lol wtf
It's matching a text without 03start. Fix it

!= 0
lol wtf end
It's matching a text without 03start. Fix it

== 0
aaa sssstartttt bbb
Not matching 3aaa sssstartttt bbb yet

!= 0
abc end start
It shouldn't match 3aaa end start. Remember the regex engine starts anywhere in the string if your pattern is not anchored. Check char by char if end is not present.

!= 1
aaa eenndd ssstarttt bbb
Not matching 03aaa eenndd ssstarttt bbb yet

!= 1
aaa eenndd sssstartttt bbb end
Not matching 3aaa eenndd sssstartttt bbb end yet

!= 1
%€£@"#¤"# start %€£@&#"¤ end %€£@
Any character is allowed in the text.

!= 1
%€£@"#¤"# eenndd %€£@"#¤"# sssstartttt %€£@"#¤"# end %€£@"#¤"#
Any character is allowed in the text.

!= 1
aaa start end start
It should match 3aaa start end start. By now you should be wondering if you have to anchor it to ^. And if you do anchor it, how to tell in a lookahead if it's BEFORE "start". Try to make your pattern MATCH char by char from the start to make it fail if it encounters "end". For example /(?!end)./ matches a char the way you no want to loop it

regml: start end, 0 != 0
I don't want backreferences if there's nothing that needs to be retrieved. Use (?:group) instead of (group)

!= 0
end start end start end start end start
It shouldn't match "end start end start end start end start".