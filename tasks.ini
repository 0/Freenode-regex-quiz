[task1]
title=Word Boundaries
description=Check if a string contains the word '06word' in it (case insensitive). 14Submit your solution as !try /pattern/[modifiers]. If you have no idea, I guess you could !try /word/.
sub=0
total=224
success=124
tests=6
testMtime=1327053750
finalMessage=Excellent! I can now search my document with 03 $+ $regexUser($1,task $+ $2,shortest) $+ . 02I guess you have some regex knowledge, so let's get started!
shortest=foo 11

[task2]
title=Capitalizing I
description=Use $!regsub() to replace every occurrence of the word "i" with the word "I" (uppercase, I as in me). E.g.: 03i'm replacing it. am i not? -> 03I'm replacing it. am I not?. 14Submit your solution as !try s/pattern/subst/[modifiers]. A regex match is replaced with the text 06subst when using $!regsub().
sub=1
total=127
success=39
tests=6
testMtime=1327053750
finalMessage=Awesome! 03I02'll use it on input to fix my lazy spelling! 03I02 mean... 03I02 just wanted to check if you understood how it worked. :-) Let's test your knowledge!
shortest=foo 10

[task3]
title=Uppercase Consonants
description=Since $!regex() returns the number of matches, can you make it return the number of uppercase consonants (B,C,D,F,..,Y,Z) in a given string? E.g.: it should return 063 with the text "03ABcDeFO!".
tests=8
testMtime=1327075418
sub=0
finalMessage=You're starting to get the idea, aren't you?
total=16
success=13
shortest=SirRagnarok 20

[task4]
title=Retreive Numbers
description=Count the number of integers in the string. Integers are, for example: 1, 2, 65, 2579, etc.
sub=0
tests=10
testMtime=1327053750
finalMessage=Now you know what an integer is!
total=8
success=8
shortest=SirRagnarok 6

[task5]
title=Whitespace
description=Check if there are 4 or more whitespace characters in a row.
finalMessage=Nothing but a peanut!
sub=0
tests=6
testMtime=1327056440
total=7
success=6
shortest=SirRagnarok 9

[task6]
title=Broken Keyboard
description=Oh no! It seems my friends spilled beer all over my keyboard last night and my keys are super sticky now. Some of the time when I press a key, I get two duplicates. Can you 06pppllleaaaseee help me fix this?
finalMessage=Thank you so much! Almost lost a nerve there.
sub=1
tests=8
testMtime=1327056641
total=3
success=4
shortest=foo 14

[task7]
title=Validate an IP
description=Check if an IP address is valid. An IP address is the numerical label assigned to any device connected to the Internet. In this task you are to validate a standard IPv4 address. Start by trying to validate 06172.16.254.1.
finalMessage=That wasn't too hard, right?
sub=0
tests=7
testMtime=1327053750
total=4
success=5
shortest=foo 91

[task8]
title=HTML Tags
description=Strip all HTML tags from a string. HTML tags are enclosed in 06< and 06>. A typical tag would look like 06<tag>this06</tag>.
sub=1
finalMessage=You should know that HTML tags are way more complicated than this. You should in reality never use regex to parse HTML, but there are cases when it is "okay"; these cases being a quick and dirty job in a local text document or similar.
tests=8
testMtime=1327053750
total=5
success=3
shortest=Lindrian 16

[task9]
title=Validate Floating Point Numbers
description=Check if a floating point number (e.g. 3.14159) is in a valid format.
finalMessage=Great work! Now I can effectively match floating point numbers in any given text document!
sub=0
tests=20
testMtime=1326996717
total=2
success=3
shortest=Lindrian 61

[task10]
title=Followed by #
description=In this task I want you to capture all occurrences of a given character that is followed by a hash character ("03#") but you are not allowed to 06consume the hash character.
finalMessage=Excellent use of lookarounds!
sub=0
tests=10
testMtime=1326998205
total=2
success=2
shortest=Lindrian 7

[task11]
title=Spam Filter
description=Match a string that contains any of the following substrings: 06http://, 06www., 06porn, or 06credit card. But don't match the text if it contains one of: 06not allowed, 06filter, or 06mirc. Don't use word boundaries (anywhere in the text is fine). If you need help, try reading 02http://www.regular-expressions.info/lookaround.html.
sub=0
finalMessage=Way to go! You sure know your way around regex. I'll use this expression to clean up my dirty logs. Thank you.
tests=9
testMtime=1327015100
total=2
success=1
shortest=username 75

[task12]
title=Match an E-Mail (Simplified)
description=Verify that a given e-mail address is valid. This could be useful for website and form validation. You could start by trying to match 06example@test.com.
finalMessage=In addition, IP addresses should be enclosed in [ ], the local part could be quoted, and the TLD could be international. But let's not worry about that for now.
sub=0
tests=41
testMtime=1326997718
total=5
success=4
shortest=Lindrian 88

[task13]
title=Not Surrounded By Digits
description=Replace every 6. (dot) with a 6- (hyphen) except when the dot is surrounded by digits. ie: 3.a.b.1.2. --> 6-a-b-1.2-
finalMessage=Well done.
sub=1

[task14]
title=Repeated Words
description=I'd like to know if a text contains words with 064 chars or more which are repeated 063 or more times in the text (anywhere in the text). If so, set 03one (and only one) backreference for each word.
finalMessage=Well done.
sub=0

[task15]
title=Start before End
description=Only match lines with the text 3start, unless the text 3end is before that (end may or may not be in the string). Match: 2ssstarttt line And don't match 2line_end start
finalMessage=Well done.
sub=0

[task16]
title=Every other digit
description=Replace every other character if it's a 6\d with 6* (only those in even positions: 2, 4, 6, etc). Example:3 a1b2cde3~g45hi6 -->6 a*b*cde*~g4*hi6
finalMessage=Well done.
sub=1

[task17]
title=The Thousands
description=Use $!regsub() to put commas in all numbers to separate the thousands. ie: 0312345678 --> 0312,345,678. The number could be in a sentence, and there may be more than one number in the sentence.
finalMessage=Well done.
sub=1

[task18]
title=Quoted Text With Escapes
description=Validate a line in quotes. Return one (and only one) backreference with the text. ie: 3quoted text from 6"quoted text". Note: a 6\ escapes any char, so 3\" is a valid escape.
finalMessage=Well done.
sub=0

[task19]
title=Replace Text, Not Code
description=In an HTML page, replace the text 3micro with 3&micro;. Oh, and don't screw up the code: don't replace inside <the tags> or &entities;
finalMessage=Well done.
sub=1

[task20]
title=Tokenized List
description=In a comma separated list, backreference all elements. Moreover, an item can be enclosed in quotes and, inside quotes, a backslash escapes a character. Spaces around each element must be trimmed. Example: one,"item two" , "item \"three\"" , "and, finally, the fourth"
finalMessage=
sub=

[task21]
title=Replace In Between
description=Remove 3* only when it appears in between 6[ and 6]. Assume []s are balanced and not nested, but there may be a "]" when it's not between "[" and "]". Example: 3*b]cd[*bcd]*cdc[d*b] --> 6*b]cd[bcd]acdc[db]
sub=1
finalMessage=Wow! Well done!
