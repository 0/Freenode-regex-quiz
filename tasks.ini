[task1]
title=Word Boundaries
description=Check if a string contains the word '06word' in it (case insensitive). 14Submit your solution as !try /pattern/[modifiers]. If you have no idea, I guess you could !try /word/.
sub=0
total=222
success=122
tests=8
testMtime=1326979897
finalMessage=Excellent! I can now search my document with 03 $+ $regexUser($1,task $+ $2,shortest) $+ . 02I guess you have some regex knowledge, so let's get started!

[task2]
title=Capitalizing I
description=Use $!regsub() to replace every occurrence of the word "i" with the word "I" (uppercase, I as in me). E.g.: 03i'm replacing it. am i not? -> 03I'm replacing it. am I not?. 14Submit your solution as !try s/pattern/subst/[modifiers]. A regex match is replaced with the text 06subst when using $!regsub().
sub=1
total=125
success=37
tests=8
testMtime=1326489643
finalMessage=Awesome! 03I02'll use it on input to fix my lazy spelling! 03I02 mean... 03I02 just wanted to check if you understood how it worked. :-) Let's test your knowledge!

[task3]
title=Uppercase Consonants
description=Since $!regex() returns the number of matches, can you make it return the number of uppercase consonants (B,C,D,F,..,Y,Z) in a given string? E.g.: it should return 063 with the text "03ABcDeFO!".
tests=8
testMtime=1326642665
sub=0
finalMessage=You're starting to get the idea, aren't you?
total=14
success=11

[task4]
title=Retreive Numbers
description=Count the number of integers in the string. Integers are, for example: 1, 2, 65, 2579, etc.
sub=0
tests=9
testMtime=1280186800
finalMessage=Now you know what an integer is!
total=6
success=6

[task5]
title=Whitespace
description=Check if there are 4 or more whitespace characters in a row.
finalMessage=Nothing but a peanut!
sub=0
tests=4
testMtime=1280194251
total=5
success=4

[task6]
title=Broken Keyboard
description=Oh no! It seems my friends spilled beer all over my keyboard last night and my keys are super sticky now. Some of the time when I press a key, I get two duplicates. Can you 06pppllleaaaseee help me fix this?
finalMessage=Thank you so much! Almost lost a nerve there.
sub=1
tests=8
testMtime=1326401702
total=2
success=3

[task7]
title=Validate an IP
description=Check if an IP address is valid. An IP address is the numerical label assigned to any device connected to the Internet. In this task you are to validate a standard IPv4 address. Start by trying to validate 06172.16.254.1.
finalMessage=That wasn't too hard, right?
sub=0
tests=8
testMtime=1325879273
total=3
success=4

[task8]
title=HTML Tags
description=Strip all HTML tags from a string. HTML tags are enclosed in 06< and 06>. A typical tag would look like 06<tag>this06</tag>.
sub=1
finalMessage=You should know that HTML tags are way more complicated than this. You should in reality never use regex to parse HTML, but there are cases when it is "okay"; these cases being a quick and dirty job in a local text document or similar.
tests=10
testMtime=1326995520
total=4
success=3
shortest=Lindrian 16

[task9]
title=Validate Floating Point Numbers
description=Check if a floating point number (e.g. 3.14159) is in a valid format.
finalMessage=Great work! Now I can effectively match floating point numbers in any given text document!
sub=0
tests=20
testMtime=1326996717
total=2
success=3
shortest=Lindrian 61

[task10]
title=Match an E-Mail (Simplified)
description=Verify that a given e-mail address is valid. This could be useful for website and form validation. You could start by trying to match 06example@test.com.
finalMessage=In addition, IP addresses should be enclosed in [ ], the local part could be quoted, and the TLD could be international. But let's not worry about that for now.
sub=0
tests=41
testMtime=1326997718
total=5
success=4
shortest=Lindrian 88

[task11]
title=Followed by #
description=In this task I want you to capture all occurrences of a given character that is followed by a hash character ("03#") but you are not allowed to 06consume the hash character.
finalMessage=Excellent use of lookarounds!
sub=0
tests=10
testMtime=1326998205
total=2
success=2
shortest=Lindrian 7

[task12]
title=Spam Filter
description=Match a string that contains any of the following substrings: 06http://, 06www., 06porn, or 06credit card. But don't match the text if it contains one of: 06not allowed, 06filter, or 06mirc. Don't use word boundaries (anywhere in the text is fine). If you need help, try reading 02http://www.regular-expressions.info/lookaround.html.
sub=0
finalMessage=Way to go! You sure know your way around regex. I'll use this expression to clean up my dirty logs. Thank you.
tests=9
testMtime=1327015100
total=2
success=1
shortest=username 75
