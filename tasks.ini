[task1]
title=Word Boundaries
description=Check if a string contains the word '06word' in it (case insensitive). 14Submit your solution as !try /pattern/[modifiers]. If you have no idea, I guess you could !try /word/.
sub=0
total=239
success=136
tests=7
testMtime=1327515089
finalMessage=Excellent! I can now search my document with 03 $+ $regexUser($1,task $+ $2,shortest) $+ . 02I guess you have some regex knowledge, so let's get started!
shortest=foo 11

[task2]
title=Capitalizing I
description=Use substitution to replace every occurrence of the word "i" with the word "I" (uppercase, I as in me). E.g.: 03i'm replacing it. am i not? -> 03I'm replacing it. am I not?. 14Submit your solution as !try s/pattern/subst/[modifiers]. A regex match is replaced with the text 06subst when using substitution.
sub=1
total=138
success=51
tests=6
testMtime=1327053750
finalMessage=Awesome! 03I02'll use it on input to fix my lazy spelling! 03I02 mean... 03I02 just wanted to check if you understood how it worked. :-) Let's test your knowledge!
shortest=iszak 8

[task3]
title=Uppercase Consonants
description=You can with regex return the number of matches. Can you make it return the number of uppercase consonants (B,C,D,F,..,Y,Z) in a given string? E.g.: it should return 063 with the text "03ABcDeFO!". Note: Only ASCII.
tests=8
testMtime=1327075418
sub=0
finalMessage=You're starting to get the idea, aren't you?
total=27
success=25
shortest=SirRagnarok 20

[task4]
title=Retrieve Numbers
description=Count the number of integers in the string. Integers are, for example: 1, 2, 65, 2579, etc.
sub=0
tests=10
testMtime=1327053750
finalMessage=Now you know what an integer is!
total=20
success=20
shortest=SirRagnarok 6

[task5]
title=Whitespace
description=Find all occurrences of 4 or more whitespace characters in a row throughout the string.
finalMessage=Nothing but a peanut!
sub=0
tests=8
testMtime=1327103960
total=17
success=16
shortest=SirRagnarok 9

[task6]
title=Broken Keyboard
description=Oh no! It seems my friends spilled beer all over my keyboard last night and my keys are super sticky now. Some of the time when I press a key, I get two duplicates. Can you 03p04pp03l04ll03ea04aa03se04ee help me fix this? Content in 04red should be removed.
finalMessage=Thank you so much! Almost lost a nerve there.
sub=1
tests=11
testMtime=1329061371
total=13
success=12
shortest=perlpilot 13

[task7]
title=Validate an IP
description=Check if an IP address is valid. An IP address is the numerical label assigned to any device connected to the Internet. In this task you are to validate a standard IPv4 address. Start by trying to validate 06172.16.254.1.
finalMessage=That wasn't too hard, right?
sub=0
tests=10
testMtime=1328269763
total=10
success=11
shortest=SLM 69

[task8]
title=HTML Tags
description=Strip all HTML tags from a string. HTML tags are enclosed in 06< and 06>. A typical tag would look like 06<tag>this06</tag>.
sub=1
finalMessage=You should know that HTML tags are way more complicated than this. You should in reality never use regex to parse HTML, but there are cases when it is "okay"; these cases being a quick and dirty job in a local text document or similar.
tests=10
testMtime=1328270574
total=11
success=7
shortest=Lindrian 16

[task9]
title=Validate Floating Point Numbers
description=Check if a floating point number (e.g. 3.14159) is in a valid format.
finalMessage=Great work! Now I can effectively match floating point numbers in any given text document!
sub=0
tests=35
testMtime=1328271439
total=6
success=7
shortest=iszak 47

[task10]
title=Followed by #
description=For every occurence of the char 3#, backreference the previous character. Example: for the text "3a#bc# -#", set backreferences with 6a, 6c and 6-. You are not allowed to 06consume the hash character.
finalMessage=Excellent use of lookarounds!
sub=0
tests=11
testMtime=1328272693
total=6
success=6
shortest=Lindrian 7

[task11]
title=Spam Filter
description=Match a string that contains any of the following substrings: 06http://, 06www., 06porn, or 06credit card. But don't match the text if it contains one of: 06not allowed, 06filter, or 06mirc. Don't use word boundaries (anywhere in the text is fine). If you need help, try reading 02http://www.regular-expressions.info/lookaround.html.
sub=0
finalMessage=Way to go! You sure know your way around regex. I'll use this expression to clean up my dirty logs. Thank you.
tests=12
testMtime=1328273314
total=6
success=5
shortest=Lindrian 70

[task12]
title=Match an E-Mail (Simplified)
description=Verify that a given e-mail address is valid. This could be useful for website and form validation. You could start by trying to match 06example@test.com.
finalMessage=In addition, IP addresses should be enclosed in [ ], the local part could be quoted, and the TLD could be international. But let's not worry about that for now.
sub=0
tests=40
testMtime=1328274263
total=10
success=9
shortest=Lindrian 88

[task13]
title=Not Surrounded By Digits
description=Replace every 06. (dot) with a 06- (hyphen) except when the dot is surrounded by digits. E.g.: 03.a.b.1.2. --> 06-a-b-1.2-.
finalMessage=That's it! Well done.
sub=1
tests=12
testMtime=1327839655
total=7
success=7
shortest=Chib 21

[task14]
title=Repeated Words
description=I'd like to know if a text contains words with 064 chars or more which are repeated 063 or more times in the text (anywhere in the text). If so, set 03one (and only one) backreference for each word.
finalMessage=Excellent work! We covered the usual stuff, let's make it more interesting!
sub=0
tests=20
testMtime=1328280183
total=7
success=5
shortest=Lindrian 24

[task15]
title=Start before End
description=Only match lines with the text 3start, unless the text 3end is before that (end may or may not be in the string). Match: 2ssstarttt line And don't match 2line_end start
finalMessage=Now that's a construct that I'm sure you'll find very useful. Don't you think you have a deeper understanding of regex engine internals now?
sub=0
tests=15
testMtime=1328281632
total=6
success=5
shortest=Lindrian 4

[task16]
title=Every other digit
description=Replace every other character if it's a 6\d with 6* (only those in even positions: 2, 4, 6, etc). Example:3 a1b2cde3~g45hi6 -->6 a*b*cde*~g4*hi6
finalMessage=Nice answer. You see, matching with \G is necessary everytime you need to use //g and also validate the text.
sub=1
tests=11
testMtime=1328825993
total=5
success=5
shortest=sigma 5

[task17]
title=The Thousands
description=Use substitution to put commas in all numbers to separate the thousands. ie: 0312345678 --> 0312,345,678. The number could be in a sentence, and there may be more than one number in the sentence.
finalMessage=Well done.
sub=1
tests=2
testMtime=1327776000
total=3
success=3
shortest=Lindrian 6

[task18]
title=Quoted Text With Escapes
description=Validate a line in quotes. Return one (and only one) backreference with the text. ie: 3quoted text from 6"quoted text". Note: a 6\ escapes any char, so 3\" is a valid escape.
finalMessage=Excellent work! You're a good reference in regex.
sub=0
tests=15
testMtime=1327785971
total=5
success=5
shortest=sigma 3

[task19]
title=Replace Text, Not Code
description=In an HTML page, replace the text 3micro with 3&micro;. Oh, and don't screw up the code: don't replace inside <the tags> or &entities;
finalMessage=Correct. Just keep in mind you shouldn't use regex to parse HTML. Here's a link that describes why: http://www.codinghorror.com/blog/2009/11/parsing-html-the-cthulhu-way.html
sub=1
tests=26
testMtime=1328643280
total=5
success=6
shortest=sigma 5

[task20]
title=Tokenized List
description=In a comma separated list, backreference all elements. Moreover, an item can be enclosed in quotes and, inside quotes, a backslash escapes a character. Spaces around each element must be trimmed. Example: one,"item two" , "item \"three\"" , "and, finally, the fourth"
finalMessage=Very well done!
sub=
tests=13
testMtime=1328830814
total=4
success=4
shortest=Lindrian 6

[task21]
title=Replace In Between
description=Remove 3* only when it appears in between 6[ and 6]. Assume []s are balanced and not nested, but there may be a "]" when it's not between "[" and "]". Example: 3*b]cd[*bcd]*cdc[d*b] --> 6*b]cd[bcd]*cdc[db]
sub=1
finalMessage=Wow! Well done!
tests=12
testMtime=1329081384
total=4
success=4
shortest=sigma 5

[task22]
title=Outermost brackets
description=Set a backreference for the outermost set of parenthesis. ie: 062 + (x * (8 + b)) - (2 + 1) should set 3(x * (8 + b)) and 3(2 + 1) in backreferences.
sub=0
finalMessage=If anything, this expression is famous. Good work though. Not many read up on recursion!
tests=4
testMtime=1329082980
total=2
success=2
shortest=sigma 3

[task23]
title=Upper and Lower
description=Match only strings with exactly 035 uppercase and 035 lowercase characters in 06any order.
sub=0
finalMessage=MaRveLLouS
tests=0
testMtime=1327164603
total=1
success=1
shortest=sigma 3

[task24]
title=n/a
description=n/a
sub=0
finalMessage=n/a
tests=0
testMtime=1327164603
total=1
success=1
shortest=sigma 3

[task25]
title=ababba
description=Write an expression to match strings like 03"a", 03"aba", 03"ababba", 03"ababbabbba", etc. The number of consecutive 03"b"s increases one by one after each 03"a". Bonus: Make the expression 0612 characters (including quoting slashes) or less.
sub=0
finalMessage=I am humbled by your regex knowledge.
tests=29
testMtime=1327353245
total=3
success=2
shortest=Lindrian 12
